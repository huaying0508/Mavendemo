
2019.08.25
内容：
一、xml文件解析方法

1）、DOM
【优点】
      （1）、允许应用程序对数据和结构做出更改。
      （2）、访问是双向的，可以在任何时候在树中上下导航，获取和操作任意部分的数据。
【缺点】
      （1）、通常需要加载整个XML文档来构造层次结构，消耗资源大。
2）、SAX
【优势】
     （1）、不需要等待所有数据都被处理，分析就能立即开始。
     （2）、只在读取数据时检查数据，不需要保存在内存中。
     （3）、可以在某个条件得到满足时停止解析，不必解析整个文档。
     （4）、效率和性能较高，能解析大于系统内存的文档。
【缺点】
    （1）、需要应用程序自己负责TAG的处理逻辑（例如维护父/子关系等），文档越复杂程序就越复杂。
    （2）、单向导航，无法定位文档层次，很难同时访问同一文档的不同部分数据，不支持XPath。
3）、JDOM
【优点】
     （1）、使用具体类而不是接口，简化了DOM的API。
     （2）、大量使用了Java集合类，方便了Java开发人员。
【缺点】
    （1）、没有较好的灵活性。
     （2）、性能较差
4）、DOM4J
【优点】
     （1）、大量使用了Java集合类，方便Java开发人员，同时提供一些提高性能的替代方法。
     （2）、支持XPath。
     （3）、有很好的性能。
【缺点】
     （1）、大量使用了接口，API较为复杂。


二、自定义Struts框架步骤
1）、配置web.xml,创建并配置framework.xml文件
2）、定义一个Action接口
3）、通过dom4j包解析framework.xml，并将解析出来的action节点及其子节点的内容存储到actionm类中
4）、创建一个actionMappingManage类来管理actionMapping类
5）、定义一个ActionManager工厂类使用反射机制根据字符串类型的类名获取到具体的类
6）、定义一个actionServlet进行运行机制的控制
7）、创建一个test类进行测试
8）、编写jsp代码


三、mvc
1、mvc介绍
1）、Model1:就是一种纯jsp开发技术，将业务逻辑代码和视图渲染代码杂糅在一 起。
2）、Model2:Model2是在Model1的基础上，将业务逻辑的代码分离开来，单独形 成一个Servlet，Model2也是基于MVC开发。

2、特点：
1）、对数据的获取和展示分离
2）、控制层（controller）将不同的视图层（view）和模型层（model）组合在一起
3）、分为三个部分，各司其职，方便后期维护


心得：
使用了一阶段的idea，竟然没想着对其优化，这两天进行了简单优化，相信自己可以用的更加得心应手。对Struts框架有了简单的了解


------------------------------------------------------------------------------------------------------------------------

2019.09.02

内容：

一、Struts2
1、概念：是轻量级的MVC框架，主要解决了请求分发的问题，低侵入性，与业务代码的耦合度很低
2、优缺点：
1）、优点：
（1）、业务代码解耦，适合团队开发 
（2）、提升开发效率 提供了一系列API，可以大大提升项目的开发效率。

2）、缺点：
（1）、执行效率偏低，需要使用反射、解析XML等技术手段，会降低执行效率。 

二、六大核心组件
1、FC：前端控制器（Filter Controller），请求收发
2、action：业务处理
3、valuestack：值栈，用于存储数据
4、interceptor：拦截器
5、result：负责输出
6、tags:标签，负责显示数据，比较不常见

三、如何得到session
1、通过ActionContext.getContext().getSession()获得Session，
注意其返回类型为Map<String,Object>。
Map<String,Object> a = ActionContext.getContext().getSession();

2、通过ServletActionContext.getRequest().getSession()获得Session，
其返回类型为HttpSession。
HttpSession session =  ServletActionContext.getRequest().getSession();

3、让Action实现SeesionAware接口，实现setSession方法，Struts2会在实例化
Action后调用该方法，通过方法参数将Session对象注入进来。定义成员变量，
接收注入进来的Session对象。
 @Override
    public void setSession(Map<String, Object> map) {

        session = map;
    }


四、常用的六个Result

1、转发到jsp： dispatcher
2、转发到Action： chain
3、重定向到jsp： redirect
4、重定向到Action: redirectAction
5、流类型： stream
6、json类型： json


五、拦截器
1、用途：
1）、适合封装一些通用处理,便于重复利用
2）、请求参数传递给Action属性,日志的记录,权限检查, 事务 处理等。
3）、采用AOP编程思想，便于后期维护和扩展

2、拦截器的使用
1）、 创建拦截器组件：创建一个类，实现Interceptor接口，并实现intercepte方法
2）、 注册拦截器：在struts.xml中，注册拦截器，必须在<package></package>里面创建
3）、 引用拦截器：如果哪个Action希望被拦截器扩展，需要在此action配置下，引用拦截器

问题：
1、将之前src考进maven后运行报错
2、dao层和biz层，如果带有@Override，报出版本过高

方案：
1、将src文件夹变成资源文件夹：右键src--》mark directory as--> source root
2、百度，在project和modules，将project language level 改成8

心得：
进度感觉有些慢，出了bug，解决能力还有有些不足，效率低慢


--------------------------------------------------------------------------------------------------------

2019.09.06

内容：

一、反射机制
    1、定义：动态获取类的信息以及动态调用对象的方法的功能
    2、功能/作用
        1）、在运行时判断任意一个对象所属的(父)类。
        2）、在运行时构造任意一个类的对象，也就是实例化对象
        3）、在运行时判断任意一个类所具有的成员变量和方法。
        4）、在运行时调用任意一个对象的方法
    3、使用反射机制获取Class的方式
        1）、Class.forName("java.lang.String"); 
        2）、使用类的.class语法；abc.class
        3）、使用对象的getClass()方法。：String str = "aa"; Class<?> classType1 = str.getClass();   

二、ORM对象关系映射

    1、实现原理
        1）、映射类（*.java）：它的作用是描述数据库表的结构，表中的字段在类中被描述成属性，将来就可以实现把表中的记录映射成为该类的对象。简单来说就是创建一个实体类，名字，字段，属性与数据库一样，但是不区分大小写
        2）、映射文件（*.xml）：指定数据库表和映射类之间的关系
        3）、数据库配置文件（*.properties或*.xml）：与数据库连接时需要的连接信息

三、mybatis

1、mybatis相对于jdbc的优势
    1）、减少了62%的代码量 
    2）、最简单的持久化框架 
    3）、架构级性能增强 
    4）、SQL代码从程序代码中彻底分离，可重用 
    5）、增强了项目中的分工 
    6）、增强了移植性 

2、mybatis的连接数据库步骤

    1）、创建SqlMapConfig.xml，配置驱动，连接，用户名，密码和mapper下的xml资源
    2）、创建MybatisUtil工具类，用于获取SqlSession
    3）、在数据库建立一张表
    4）、创建一个实体类，类名，数据类型，字段名与数据库表一致
    5）、在mapper下创建一个xml文件，内部可选增删改查方法（insert、delete、selectOne、update、selectList），选择你要的方法，写下相应的sql语句
    6）、编写一个测试类，使用junit方法测试效果

四、Mapper映射的具体步骤

1、首先根据Mapper映射编写一个Mapper接口，接口方法名和mapper.xml里的增删改查的ID属性保持一致。
2、、再利用SqlSession提供的getMapper(..)方法，会自动返回一个 Mapper接口实例。YYY是数据库连接类，XXX是Mapper接口类
SqlSession session=YYY.getSession;
XXX mapper = session.getMapper(XXX.class);
mapper.接口方法名

五、MyBatis关联映射

1、主键映射
    1）、自动增长(mysql)
        在<insert>的尖括号里面添加keyProperty="主键字段(自动增长列)" useGeneratedKeys=“true” 
    2）、非自动增长(oracle)
        在<insert></insert>里面加上<selectKey keyProperty="主键字段(自动增长列)" order="BEFORE" resultType="java.lang.Integer"> select 序列.nextval from 表 </selectkey>
2、关联映射(一对一)
    1）、嵌套查询：通过执行另外一个SQL映射语句来返回关联数据结果（查2次）
    2）、嵌套结果：执行一个表关联SQL查询，将结果映射成关联对象（查1次）

3、集合映射(一对多)

1）、嵌套查询：通过执行另外一个SQL映射语句来返回关联数据结果（查2次）
2）、嵌套结果：执行一个表关联SQL查询，将结果映射成关联对象（查1次）

心得：时光匆匆，课程所剩无几，马上就要进入项目了，不知是该高兴还是该郁闷呢，还是随遇而安吧


